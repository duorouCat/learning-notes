deployment
    是用于部署应用的对象，为replicaset和pod提供声明式定义方法。
    工作原理：创建deployment同时会创建replicaset，deployment管理replicaset，replicaset管理pod，pod管理容器
    使用deployment可以轻松的进行
        创建ReplicaSet和Pod
        滚动升级（不停止旧服务的状态下升级）和回滚应用（将应用回滚到之前的版本）
        平滑地扩容和缩容
        暂停和继续Deployment等操作
    更新deployment有两种方法：
        1.修改镜像：kubectl set image deployment/deployment名 镜像名
        2.修改配置文件：kubectl edit demployment deployment名
        查看更新进度：kubectl rollout status deployment/deployment名
        扩容：kubectl scale deployment deployment名 --replicas 数量
        如果集群支持horizontal pod autoscaling的话可以用autoscale进行自动扩容
    回滚：
        查看deployment版本：kubectl rollout history deployment/deployment名
        回滚上一个版本：kubectl rollout undo deployment/deployment名，或指定某个版本：--to-revision=版本
        可以通过设置 .spec.revisonHistoryLimit 项来指定 deployment 最多保留多少 revison 历史记录。默认的会保留所有的 revision；如果将该项设置为 0，Deployment 就不允许回退了。
        只有 Deployment 的 rollout 被触发才会创建一个 revision！注意！当且仅当 Deployment 的 Pod template被更改，例如更新 template 中的 label 和容器镜像时，才会触发一个rollout，从而为Deployment创建出一个新的 revision。
    滚动更新配置：
        .spec.minReadySeconds
        .spec.strategy.rollingUpdate.maxSurge
        .spec.strategy.rollingUpdate.maxUnavailable

https://www.cnblogs.com/tylerzhou/p/11027559.html
statefulset
    有状态的合集，负责管理有状态服务，比如数据库等
    由三部分组成：Headless Service、StatefulSet、volumeClaimTemplates
        Headless Service：为每个pod提供唯一的名称。由statefulset创建的pod都是有顺序的，不能被随意取代，重建后的pod名称还是相同的。由于pod的ip是变化的所以使用pod名称作为唯一标识。
        volumeClaimTemplates：statefulSet使用volumeClaimTemplate，称为卷申请模板，它会为每个Pod生成不同的pvc，并绑定pv， 从而实现各pod有专用存储。deployment的所有pod都使用同一个存储卷。
            如果集群中没有StorageClass的动态供应PVC的机制，也可以提前手动创建多个PV、PVC，手动创建的PVC名称必须符合之后创建的StatefulSet命名规则：(volumeClaimTemplates.name)-(pod_name)

operator
https://zhuanlan.zhihu.com/p/246550722
operator 是一种 kubernetes 的扩展形式，利用自定义资源对象（Custom Resource）来管理应用和组件，允许用户以 Kubernetes 的声明式 API 风格来管理应用及服务。
    operator是一种为特定应用或服务提供如何运行、部署以及出现问题后如何处理的特定自定义方式。
    operator sdk可以快速构建operator应用



